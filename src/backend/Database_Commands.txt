Constructors:
CREATE TABLE IF NOT EXISTS "DBproject"."Chaine"(nom_chaine character varying COLLATE pg_catalog."default" NOT NULL,adresse character varying COLLATE pg_catalog."default",nombre_hotels integer,hotel_emails character varying COLLATE pg_catalog."default",hotel_phones character varying COLLATE pg_catalog."default",CONSTRAINT "Chaine_pkey" PRIMARY KEY (nom_chaine))TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Chaine" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Hotel" ( adresse character varying COLLATE pg_catalog."default", nombre_chambres integer, email character varying COLLATE pg_catalog."default", telephone integer, "ID_hotel" character(6) COLLATE pg_catalog."default" NOT NULL, nom_chaine character varying COLLATE pg_catalog."default", classe integer, CONSTRAINT "ID_hotel" PRIMARY KEY ("ID_hotel"), CONSTRAINT nom_chaine FOREIGN KEY (nom_chaine) REFERENCES "DBproject"."Chaine" (nom_chaine) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE NO ACTION NOT VALID ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Hotel" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Employé" ( "NAS_employé" character(9) COLLATE pg_catalog."default" NOT NULL, nom_complet character varying COLLATE pg_catalog."default", "adresse " character varying COLLATE pg_catalog."default", role character varying COLLATE pg_catalog."default", CONSTRAINT "Employé_pkey" PRIMARY KEY ("NAS_employé") ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Employé" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Reservation" ( "ID_reservation" integer NOT NULL, "ID_chambre" character(12) COLLATE pg_catalog."default", date_start date, date_end date, "NAS_client" character(9) COLLATE pg_catalog."default", status_paiement boolean, CONSTRAINT "Reservation_pkey" PRIMARY KEY ("ID_reservation") ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Reservation" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Location" ( "ID_location" integer NOT NULL, "NAS_employé" character(9) COLLATE pg_catalog."default", "NAS_client" character(9) COLLATE pg_catalog."default", "ID_chambre" character(12) COLLATE pg_catalog."default", date_start date, date_end date, CONSTRAINT "Location_pkey" PRIMARY KEY ("ID_location") ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Location" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Client" ( "NAS_client" character(9) COLLATE pg_catalog."default" NOT NULL, nom_complet character varying COLLATE pg_catalog."default", "date_enregistré" date, adresse character varying COLLATE pg_catalog."default", CONSTRAINT "Client_pkey" PRIMARY KEY ("NAS_client") ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Client" OWNER to postgres;

CREATE TABLE IF NOT EXISTS "DBproject"."Chambre" ( "ID_chambre" character(12) COLLATE pg_catalog."default" NOT NULL, "ID_hotel" integer, prix integer, "commodités" character varying COLLATE pg_catalog."default", "capacité" character varying COLLATE pg_catalog."default", vue character varying COLLATE pg_catalog."default", peut_etendre boolean, dommages character varying COLLATE pg_catalog."default", CONSTRAINT "Chambre_pkey" PRIMARY KEY ("ID_chambre") ) TABLESPACE pg_default;
ALTER TABLE IF EXISTS "DBproject"."Chambre" OWNER to postgres;

triggers:
CREATE TRIGGER name1
BEFORE INSERT ON Location
FOR EACH ROW
BEGIN
INSERT INTO salary_changes(employee_id,old_salary,new_salary)
    VALUES(NEW.employee_id,OLD.salary,NEW.salary);
END;

CREATE TRIGGER name1
BEFORE UPDATE ON Location
FOR EACH ROW
BEGIN
UPDATE salary_changes(employee_id,old_salary,new_salary)
    SET
    WHERE NEW.ID_Reservation=ID_Reservation;
END;

Views:
CREATE VIEW numOfRoomsByZone AS
SELECT COUNT Chambre
FROM Hotel
WHERE Adresse LIKE %cityname%;

Indexes:


break
Commands to run to update backend.Database:


break

